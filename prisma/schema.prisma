// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  WISATAWAN
  ADMIN
}

model User {
  role                Role                  @default(WISATAWAN)
  username            String                @id @db.VarChar(150)
  name                String                @db.VarChar(150)
  email               String                @unique @db.VarChar(100)
  password            String                @db.VarChar(150)
  token               String?               @db.VarChar(150)
  DestinationView     DestinationView[]
  UserLogin           UserLogin[]
  FavoriteDestination FavoriteDestination[]

  @@map("users")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(150)

  Destination Destination[]

  @@map("categories")
}

model Destination {
  id                  Int                   @id @default(autoincrement())
  cover               Bytes                 @db.MediumBlob
  name                String                @db.VarChar(150)
  address             String                @db.VarChar(150)
  description         String                @db.Text
  urlLocation         String                @db.VarChar(200)
  categoryId          Int
  Category            Category              @relation(fields: [categoryId], references: [id])
  picture             Picture[]
  DestinationView     DestinationView[]
  FavoriteDestination FavoriteDestination[]

  @@map("destinations")
}

model Picture {
  id            Int         @id @default(autoincrement())
  picture       Bytes       @db.MediumBlob
  destinationId Int
  Destination   Destination @relation(fields: [destinationId], references: [id])

  @@map("pictures")
}

model FavoriteDestination {
  id            Int         @id @default(autoincrement())
  destinationId Int
  userId        String      @db.VarChar(150)
  createdAt     DateTime    @default(now())
  Destination   Destination @relation(fields: [destinationId], references: [id])
  User          User        @relation(fields: [userId], references: [username])

  @@unique([destinationId, userId]) // Untuk mencegah duplikasi favorit
  @@map("favorite_destinations")
}

//untuk total views destianasi

model DestinationView {
  id            Int         @id @default(autoincrement())
  destinationId Int
  userId        String      @db.VarChar(150)
  viewedAt      DateTime    @default(now())
  Destination   Destination @relation(fields: [destinationId], references: [id])
  User          User        @relation(fields: [userId], references: [username])

  @@map("destination_views")
}

model UserLogin {
  id      Int      @id @default(autoincrement())
  userId  String   @db.VarChar(150)
  loginAt DateTime @default(now())
  User    User     @relation(fields: [userId], references: [username])

  @@map("user_logins")
}
